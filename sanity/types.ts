/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Youtube = {
  _type: "youtube";
  url?: string;
};

export type Cv = {
  _id: string;
  _type: "cv";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  categoryName?: string;
  categoryDescription?: string;
  items?: Array<{
    title?: string;
    date?: string;
    endDate?: string;
    eventName?: string;
    location?: string;
    description?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    links?: Array<{
      label?: string;
      url?: string;
      _key: string;
    }>;
    images?: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      caption?: string;
      _type: "image";
      _key: string;
    }>;
    _key: string;
  }>;
};

export type Gear = {
  _id: string;
  _type: "gear";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  gearName?: string;
  comment?: string;
  gearImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  link?: string;
};

export type Tech = {
  _id: string;
  _type: "tech";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  techName?: string;
  comment?: string;
  platform?: Array<string>;
  techIcon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  link?: string;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  overview?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  slug?: Slug;
  projectUrl?: string;
  coverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h2" | "h3";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
    _key: string;
  } | {
    _key: string;
  } & Youtube>;
  year?: number;
  medium?: string;
  size?: string;
  edition?: string;
  collaboration?: string;
  imagesGallery?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type Job = {
  _id: string;
  _type: "job";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  jobTitle?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  url?: string;
  location?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  startDate?: string;
  endDate?: string;
  projectLinks?: Array<{
    label?: string;
    url?: string;
    _key: string;
  }>;
  projectImages?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
    _key: string;
  }>;
};

export type Profile = {
  _id: string;
  _type: "profile";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  fullName?: string;
  headline?: string;
  profileImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  shortBio?: string;
  email?: string;
  location?: string;
  fullBio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  resumeURL?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    _type: "file";
  };
  socialLinks?: {
    github?: string;
    linkedin?: string;
    instagram?: string;
  };
  skillCategories?: Array<{
    category?: string;
    skills?: Array<string>;
    _key: string;
  }>;
  experience?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "job";
  }>;
  cvCategories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "cv";
  }>;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type MediaTag = {
  _id: string;
  _type: "media.tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | Geopoint | Youtube | Cv | Gear | Tech | Project | Job | Profile | SanityFileAsset | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | MediaTag | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: sanity/lib/queries.ts
// Variable: PROFILE_QUERY
// Query: *[_type == "profile"]{  _id,  fullName,  headline,  profileImage {alt, "image": asset->url},  shortBio,  location,  fullBio,  email,  "resumeURL": resumeURL.asset->url,  socialLinks,  skillCategories[]{    category,    skills  },  experience[]->{    _id,    name,    jobTitle,    "logo": logo.asset->url,    url,    location,    description,    startDate,    endDate,    projectLinks[]{      label,      url    },    projectImages[]{      "image": asset->url,      alt,      caption    }  },  cvCategories[]->{    _id,    categoryName,    categoryDescription,    items[]{      title,      date,      endDate,      eventName,      location,      description,      links[]{        label,        url      },      images[]{        "image": asset->url,        alt,        caption      }    }  }}
export type PROFILE_QUERYResult = Array<{
  _id: string;
  fullName: string | null;
  headline: string | null;
  profileImage: {
    alt: string | null;
    image: string | null;
  } | null;
  shortBio: string | null;
  location: string | null;
  fullBio: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  email: string | null;
  resumeURL: string | null;
  socialLinks: {
    github?: string;
    linkedin?: string;
    instagram?: string;
  } | null;
  skillCategories: Array<{
    category: string | null;
    skills: Array<string> | null;
  }> | null;
  experience: Array<{
    _id: string;
    name: string | null;
    jobTitle: string | null;
    logo: string | null;
    url: string | null;
    location: string | null;
    description: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    startDate: string | null;
    endDate: string | null;
    projectLinks: Array<{
      label: string | null;
      url: string | null;
    }> | null;
    projectImages: Array<{
      image: string | null;
      alt: string | null;
      caption: string | null;
    }> | null;
  }> | null;
  cvCategories: Array<{
    _id: string;
    categoryName: string | null;
    categoryDescription: string | null;
    items: Array<{
      title: string | null;
      date: string | null;
      endDate: string | null;
      eventName: string | null;
      location: string | null;
      description: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }> | null;
      links: Array<{
        label: string | null;
        url: string | null;
      }> | null;
      images: Array<{
        image: string | null;
        alt: string | null;
        caption: string | null;
      }> | null;
    }> | null;
  }> | null;
}>;
// Variable: JOB_QUERY
// Query: *[_type == "job"]{  _id,  name,  jobTitle,  "logo": logo.asset->url,  url,  location,  description,  startDate,  endDate,  projectLinks[]{    label,    url  },  projectImages[]{    "image": asset->url,    alt,    caption  }}
export type JOB_QUERYResult = Array<{
  _id: string;
  name: string | null;
  jobTitle: string | null;
  logo: string | null;
  url: string | null;
  location: string | null;
  description: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  startDate: string | null;
  endDate: string | null;
  projectLinks: Array<{
    label: string | null;
    url: string | null;
  }> | null;
  projectImages: Array<{
    image: string | null;
    alt: string | null;
    caption: string | null;
  }> | null;
}>;
// Variable: TECH_QUERY
// Query: *[_type == "tech"]{  _id,  techName,  comment,  platform,  "techIcon": techIcon.asset->url,  link,}
export type TECH_QUERYResult = Array<{
  _id: string;
  techName: string | null;
  comment: string | null;
  platform: Array<string> | null;
  techIcon: string | null;
  link: string | null;
}>;
// Variable: GEAR_QUERY
// Query: *[_type == "gear"]{  _id,  gearName,  comment,  gearImage {alt, "image": asset->url},  link,}
export type GEAR_QUERYResult = Array<{
  _id: string;
  gearName: string | null;
  comment: string | null;
  gearImage: {
    alt: string | null;
    image: string | null;
  } | null;
  link: string | null;
}>;
// Variable: PROJECTS_QUERY
// Query: *[_type == "project"]{  _id,   name,  "slug": slug.current,  coverImage { alt, "image": asset->url },  medium,  year,}
export type PROJECTS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  slug: string | null;
  coverImage: {
    alt: string | null;
    image: string | null;
  } | null;
  medium: string | null;
  year: number | null;
}>;
// Variable: PROJECT_QUERY
// Query: *[_type == "project" && slug.current == $slug][0]{  _id,  name,  projectUrl,  coverImage { alt, "image": asset->url },  tagline,  description,  overview}
export type PROJECT_QUERYResult = {
  _id: string;
  name: string | null;
  projectUrl: string | null;
  coverImage: {
    alt: string | null;
    image: string | null;
  } | null;
  tagline: null;
  description: Array<{
    _key: string;
  } & Youtube | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "h2" | "h3" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  overview: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"profile\"]{\n  _id,\n  fullName,\n  headline,\n  profileImage {alt, \"image\": asset->url},\n  shortBio,\n  location,\n  fullBio,\n  email,\n  \"resumeURL\": resumeURL.asset->url,\n  socialLinks,\n  skillCategories[]{\n    category,\n    skills\n  },\n  experience[]->{\n    _id,\n    name,\n    jobTitle,\n    \"logo\": logo.asset->url,\n    url,\n    location,\n    description,\n    startDate,\n    endDate,\n    projectLinks[]{\n      label,\n      url\n    },\n    projectImages[]{\n      \"image\": asset->url,\n      alt,\n      caption\n    }\n  },\n  cvCategories[]->{\n    _id,\n    categoryName,\n    categoryDescription,\n    items[]{\n      title,\n      date,\n      endDate,\n      eventName,\n      location,\n      description,\n      links[]{\n        label,\n        url\n      },\n      images[]{\n        \"image\": asset->url,\n        alt,\n        caption\n      }\n    }\n  }\n}": PROFILE_QUERYResult;
    "*[_type == \"job\"]{\n  _id,\n  name,\n  jobTitle,\n  \"logo\": logo.asset->url,\n  url,\n  location,\n  description,\n  startDate,\n  endDate,\n  projectLinks[]{\n    label,\n    url\n  },\n  projectImages[]{\n    \"image\": asset->url,\n    alt,\n    caption\n  }\n}": JOB_QUERYResult;
    "*[_type == \"tech\"]{\n  _id,\n  techName,\n  comment,\n  platform,\n  \"techIcon\": techIcon.asset->url,\n  link,\n}": TECH_QUERYResult;
    "*[_type == \"gear\"]{\n  _id,\n  gearName,\n  comment,\n  gearImage {alt, \"image\": asset->url},\n  link,\n}": GEAR_QUERYResult;
    "*[_type == \"project\"]{\n  _id, \n  name,\n  \"slug\": slug.current,\n  coverImage { alt, \"image\": asset->url },\n  medium,\n  year,\n}": PROJECTS_QUERYResult;
    "*[_type == \"project\" && slug.current == $slug][0]{\n  _id,\n  name,\n  projectUrl,\n  coverImage { alt, \"image\": asset->url },\n  tagline,\n  description,\n  overview\n}": PROJECT_QUERYResult;
  }
}
